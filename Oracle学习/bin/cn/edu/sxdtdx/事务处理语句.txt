非关联子查询，把那个子查询弄成中间的再弄
关联子查询，是遍历主查询
集合操作：对结果集的处理参与列的必须同构的
约束条件：PK/FK/Not NULL /Unique/check要符合某些要求;
建表

外键：一定业自列表里面（参考的是别人的别人可以是自己也可以是别人的）
建立表的时候怎么建立一个外键
有个专业表，计算机，音乐，电影
有个学生表，主键，名字，mid

create table major_ning(
mid number primary key, mname varchar2(30))
create table student_ning(
 id number(5) primary key,
 name varchar2(20),
 mid number(2),
 constraint stuning_mid_fk roreign key(mid) references major_ning(mid);
 建好表之后要填东西就行满足条件
 被参照的表是主表，先得有1，2，3专业才能选专业了
 select s.name m.mname from student_ning s join major_ning m
 on s.mid = m.mid
 and s.name = 'peter';
 
如果新增到主表的记录：
不符合的话会出现parent key not found 2291;
假如从专业表里面删除也会删除 些时已经被参照了，删除不成功他会报错：
数据参照的话，数据在保护
2292：delete from major_ning where id = 1;//这个会报错chile recond found找到子记录
conn openlab/open123;
kua用户访问openlab.major
在建立子表时，外键约束
在建立学生表的时候在最后加了个不加，号，on前面没有逗号 on delete set null(这个是把那些子表的东西弄成空面不是删除了)/on delete cascade(这个是把子表里面的东西全部给删除了) 
eg.如果一个部门被取消了那么他的那些全被取消了
delete 是删除记录，drop是删除表结构
update修改表中的已经存在的记录
----insert 
insert into dept(deptno,dname,loc建议写上) values(80, 'market',dd);-次只能加一条

create table mydept(
id number(2),
name varchar2(20),
location varchar2(30));

insert into mydept 
select deptno, dname, loc from dept;这个是插入多条数据
一次性的往数据表里插入多条数据
show user(这个命令看当前的用户)

createtable emp_dup
as
select * from ningl.emp;//这个是完全复制
连内容到结构 	
复制表结构，不复制数据
create table emp_bak
as 
select * from ningl.emp
where empno > 99999;
复制表结构的时候经常在开发中用到
update 
update emp_ning set sal = 1000
where empno = 7368;//不加条件，的话全表全改

update emp_ning set sal = 1500, deptno = 20, job = 'sale man',
where empno = 7369;

update emp set deptno = 40
where ename = 'SCOTT'

delete 
delete [from] emp_ning(表名) where deptno = 10;（这个是条件）
这里可能出现错误，

事务：
select count(*) from ninglj.emp;
insert into emp(empno,ename) values(1234,'peter');
一个	事务的开始是以commit就是终止一个事务
一个同学把这个记录给删除了，但是没有commit，但是我不能操作这个记录因为此时锁住了，所以那个同学提交了之后锁就释放了，
insert delete update确认，恢复（事务就终止了）终止事务就是commit,rollback
DML操作就是（create table是个立即提交，这个语句前面的也提交了这个是人隐式的提交，commit是显示提交 ）
事务就是提交结束;(事务一但开始就会被锁定了其他会话找不见了)
show user;
事务的特性：ACID
原子性，一个事务要么完全成功，要么一起失败
一致性，从一个状态切换到另一个状态
隔离性，在事务提交之前，其他事务觉察不到
持久性，一旦事务提交，它是永远的（如果删除了就完完了）
事务语句：
commint /rollback/(相当于个还原点)如果没有

savepoint A;
savepoint B;
rollback to B;//这个就是个回退，后面的东西全都 没有了

数据库的主要对象 前面介绍的全是语句（查询，删除等的）
表：
视图：（view建立在表之上的类似于虚表）
索引： index
序列 sequence(oracle特有的)
约束条件
同义词等

---视图：
对于账务部门来说只需要知道他的那个工资和名字然后打在他的卡上，对于其他的他不必知道
所以我们建立一种结构只有一部分字段能看见，这种结构叫视图
视图里面没有真正的数据的
他不必知道的
控制数据访问：（不能访问其他字段）
简化查询（财务部门只用到那两个字段也就，他查的时候我们建立视图就不用指名具体的字段了）
数据独立性（）
避免重复访问相同的数据

create view v_emp_ning
as
select ename, sal from emp_ning;（这是个基表，这个相当于个投影，如果这个基表没了，这个视图也不在了，，如果
删除了视图不影响视图）
这个视图就是对应的一个查询语句
drop view v_emp_ning;
查询视图和表完全一样，
select * from v_emp_ning;

desc v_emp_ning;//视图也能这么查找

drop view v_emp_ning;

如果更给视图，他只是对应一个查询语句
视图是个虚的结构,把那个原来的视图给替换了
create or replace view v_emp_ning
as
select ename, sal, comm from emp_ning;

查数据字典：
user_tables;
user_views;
usr_constraints;
select count(*) from user_tables;
desc user_talbes;//
show user看一下有多少个表了如果想看一下表的名字我必须知道表的结构
select table_name from user_tables 
where rownum < 20;(前20条)--查前19条

select * from user_table
where table_name = 'EMP';-查emp表的信息
user_tables是只读的不能修改
谁也不能写，管理员也不能改，只是描述当前的状态
select count(*) from user_views;
视图其实是个查询语句，里面有个TEXT里面存着，查询语句 
数据字典分成几大类：
user_****(假如是talbes用户名下所有表)
all_***当前用户能访问的所有表
自己的表+别的用户允许自己访问的表
dba_****数据库下所有的表（dba必须要有权限）

select count(*) from user_objects;//用户对象 
进入数据库默认是大写的所以必须大写，小写就查不出来了
select text from user_views

create or replace view emp_sum
as
select deptno, sum(sal) sum_sal(这个必须是个列名必须是个名字不能是个表达式视图类似于表的结构)
from emp
group by deptno;
经过计算得到的视图叫复杂视图，

--索引
去图书馆里借书，一本本的找就是全盘扫描（全表扫描），找卡片（扫描卡片）
第一个表建立一个卡片，上面记着主键和地理位置
全表扫描，
高水位线：曾经包含的数据最多的记录（全表扫描会扫最多的，即使没有也要扫）
RowID在数据库里的物理位置，
通过RowID来扫描数据（索引）这个索引不是我们关心的是服务器管理的
select empno,ename,rowid from ninglj.emp;
当e有pk和唯一约束时时索引自动创建
select index_name from user_indexes(用户索引) where table_anem = 'MYTEM';
怎么手动建立索引：
select * from emp where ename = 'scott'//假如
名子不是唯一的我们经常查名字所以我们要建立名字的索引
create index emp_ename_idx on emp(ename);
经常被查询的列
经常用作连接的列
空值 多
表很大，查询的结果集小
外键殊荣
经常需要排列和分组
索引不 是万能的（图书馆的书更新快增加修改删除是阻碍，未必是好的）

不适合做索引的
小表
列很少出现在where子句
查询的结果集非常大（总共有5本你就全用）

函数导致索引用不了
单行导致索引失效upper(first_name索引是建立在first_name上的他变大写了怎么能用呀)
表达式导致索引不能用（sal*12）
隐式数据类型导致索引不能用
like,where c1 = 2;(c1是varchar类型的)
否定的形式导致索引不能用
IS null导致索引不能用



	
 